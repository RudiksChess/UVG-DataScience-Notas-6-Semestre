{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    },
    "colab": {
      "name": "Copy of Lab_10_Autocodifiucadores.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9zODwBw2fEwr"
      },
      "source": [
        "# Laboratorio 10 - AutoCodificadores"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GDYWqKi5fEwt"
      },
      "source": [
        "## Complete las tareas indicadas abajo\n",
        "\n",
        "**TAREA: Ejecute las siguientes importaciones**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vrI3ouK0fEwu"
      },
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cVqp4zemfEww"
      },
      "source": [
        "## Los datos\n",
        "\n",
        "En la tabla que van a trabajar, se encuentra el consumo promedio de 17 tipos de comida, en gramos por persona por semana, para cada país del Reino Unido (UK).\n",
        "\n",
        "La tabla tiene algunas variaciones interesantes en diferentes tipos de comida, pero a nivel general las diferencias no son tan notables.\n",
        "\n",
        "**TAREA:  Ejecute la siguiente instrucción para leer los datos**\n",
        "\n",
        "Es posible que tenga que modificar la instrucción de acuerdo al lugar donde descargó el archivo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_xqOGkYmfEwx"
      },
      "source": [
        "path = \"https://raw.githubusercontent.com/RudiksChess/UVG-DataScience-Notas-6-Semestre/main/Lab10/UK_foods.csv\"\n",
        "df = pd.read_csv(path,index_col='Unnamed: 0')"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zUnqqSYBfEwx"
      },
      "source": [
        "**TAREA: Despliegue el DataFrame**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SeIeldaRfEwy"
      },
      "source": [
        "#SU CODIGO AQUI"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WqjZTxaPfEwy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 567
        },
        "outputId": "562fb1a1-d262-44e6-c9ab-9eff67a80beb"
      },
      "source": [
        "df"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>England</th>\n",
              "      <th>Wales</th>\n",
              "      <th>Scotland</th>\n",
              "      <th>N.Ireland</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Cheese</th>\n",
              "      <td>105</td>\n",
              "      <td>103</td>\n",
              "      <td>103</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Carcass_meat</th>\n",
              "      <td>245</td>\n",
              "      <td>227</td>\n",
              "      <td>242</td>\n",
              "      <td>267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Other_meat</th>\n",
              "      <td>685</td>\n",
              "      <td>803</td>\n",
              "      <td>750</td>\n",
              "      <td>586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fish</th>\n",
              "      <td>147</td>\n",
              "      <td>160</td>\n",
              "      <td>122</td>\n",
              "      <td>93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fats_and_oils</th>\n",
              "      <td>193</td>\n",
              "      <td>235</td>\n",
              "      <td>184</td>\n",
              "      <td>209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sugars</th>\n",
              "      <td>156</td>\n",
              "      <td>175</td>\n",
              "      <td>147</td>\n",
              "      <td>139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fresh_potatoes</th>\n",
              "      <td>720</td>\n",
              "      <td>874</td>\n",
              "      <td>566</td>\n",
              "      <td>1033</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fresh_Veg</th>\n",
              "      <td>253</td>\n",
              "      <td>265</td>\n",
              "      <td>171</td>\n",
              "      <td>143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Other_Veg</th>\n",
              "      <td>488</td>\n",
              "      <td>570</td>\n",
              "      <td>418</td>\n",
              "      <td>355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processed_potatoes</th>\n",
              "      <td>198</td>\n",
              "      <td>203</td>\n",
              "      <td>220</td>\n",
              "      <td>187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processed_Veg</th>\n",
              "      <td>360</td>\n",
              "      <td>365</td>\n",
              "      <td>337</td>\n",
              "      <td>334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fresh_fruit</th>\n",
              "      <td>1102</td>\n",
              "      <td>1137</td>\n",
              "      <td>957</td>\n",
              "      <td>674</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cereals</th>\n",
              "      <td>1472</td>\n",
              "      <td>1582</td>\n",
              "      <td>1462</td>\n",
              "      <td>1494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Beverages</th>\n",
              "      <td>57</td>\n",
              "      <td>73</td>\n",
              "      <td>53</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Soft_drinks</th>\n",
              "      <td>1374</td>\n",
              "      <td>1256</td>\n",
              "      <td>1572</td>\n",
              "      <td>1506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alcoholic_drinks</th>\n",
              "      <td>375</td>\n",
              "      <td>475</td>\n",
              "      <td>458</td>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Confectionery</th>\n",
              "      <td>54</td>\n",
              "      <td>64</td>\n",
              "      <td>62</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     England  Wales  Scotland  N.Ireland\n",
              "Cheese                   105    103       103         66\n",
              "Carcass_meat             245    227       242        267\n",
              "Other_meat               685    803       750        586\n",
              "Fish                     147    160       122         93\n",
              "Fats_and_oils            193    235       184        209\n",
              "Sugars                   156    175       147        139\n",
              "Fresh_potatoes           720    874       566       1033\n",
              "Fresh_Veg                253    265       171        143\n",
              "Other_Veg                488    570       418        355\n",
              "Processed_potatoes       198    203       220        187\n",
              "Processed_Veg            360    365       337        334\n",
              "Fresh_fruit             1102   1137       957        674\n",
              "Cereals                 1472   1582      1462       1494\n",
              "Beverages                 57     73        53         47\n",
              "Soft_drinks             1374   1256      1572       1506\n",
              "Alcoholic_drinks         375    475       458        135\n",
              "Confectionery             54     64        62         41"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4H84XR_1fEwy"
      },
      "source": [
        "**TAREA:  Realice la transposición del DataFrame para que las columnas se conviertan en el índice.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "96sMejt5fEwz"
      },
      "source": [
        "df_transpose =df.transpose()"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cXIIXjR_fEwz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "90f5a6bc-1f25-4a5b-c13c-8bbe8a14a75c"
      },
      "source": [
        "df_transpose "
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cheese</th>\n",
              "      <th>Carcass_meat</th>\n",
              "      <th>Other_meat</th>\n",
              "      <th>Fish</th>\n",
              "      <th>Fats_and_oils</th>\n",
              "      <th>Sugars</th>\n",
              "      <th>Fresh_potatoes</th>\n",
              "      <th>Fresh_Veg</th>\n",
              "      <th>Other_Veg</th>\n",
              "      <th>Processed_potatoes</th>\n",
              "      <th>Processed_Veg</th>\n",
              "      <th>Fresh_fruit</th>\n",
              "      <th>Cereals</th>\n",
              "      <th>Beverages</th>\n",
              "      <th>Soft_drinks</th>\n",
              "      <th>Alcoholic_drinks</th>\n",
              "      <th>Confectionery</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>England</th>\n",
              "      <td>105</td>\n",
              "      <td>245</td>\n",
              "      <td>685</td>\n",
              "      <td>147</td>\n",
              "      <td>193</td>\n",
              "      <td>156</td>\n",
              "      <td>720</td>\n",
              "      <td>253</td>\n",
              "      <td>488</td>\n",
              "      <td>198</td>\n",
              "      <td>360</td>\n",
              "      <td>1102</td>\n",
              "      <td>1472</td>\n",
              "      <td>57</td>\n",
              "      <td>1374</td>\n",
              "      <td>375</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wales</th>\n",
              "      <td>103</td>\n",
              "      <td>227</td>\n",
              "      <td>803</td>\n",
              "      <td>160</td>\n",
              "      <td>235</td>\n",
              "      <td>175</td>\n",
              "      <td>874</td>\n",
              "      <td>265</td>\n",
              "      <td>570</td>\n",
              "      <td>203</td>\n",
              "      <td>365</td>\n",
              "      <td>1137</td>\n",
              "      <td>1582</td>\n",
              "      <td>73</td>\n",
              "      <td>1256</td>\n",
              "      <td>475</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Scotland</th>\n",
              "      <td>103</td>\n",
              "      <td>242</td>\n",
              "      <td>750</td>\n",
              "      <td>122</td>\n",
              "      <td>184</td>\n",
              "      <td>147</td>\n",
              "      <td>566</td>\n",
              "      <td>171</td>\n",
              "      <td>418</td>\n",
              "      <td>220</td>\n",
              "      <td>337</td>\n",
              "      <td>957</td>\n",
              "      <td>1462</td>\n",
              "      <td>53</td>\n",
              "      <td>1572</td>\n",
              "      <td>458</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>N.Ireland</th>\n",
              "      <td>66</td>\n",
              "      <td>267</td>\n",
              "      <td>586</td>\n",
              "      <td>93</td>\n",
              "      <td>209</td>\n",
              "      <td>139</td>\n",
              "      <td>1033</td>\n",
              "      <td>143</td>\n",
              "      <td>355</td>\n",
              "      <td>187</td>\n",
              "      <td>334</td>\n",
              "      <td>674</td>\n",
              "      <td>1494</td>\n",
              "      <td>47</td>\n",
              "      <td>1506</td>\n",
              "      <td>135</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Cheese  Carcass_meat   ...  Alcoholic_drinks   Confectionery \n",
              "England       105            245  ...                375              54\n",
              "Wales         103            227  ...                475              64\n",
              "Scotland      103            242  ...                458              62\n",
              "N.Ireland      66            267  ...                135              41\n",
              "\n",
              "[4 rows x 17 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tm3-tWSofEw0"
      },
      "source": [
        "**TAREA:  Cree un mapa de calor a partir del DataFrame.** \n",
        "\n",
        "¿Existe algún país que sobresalga por diferencia de los otros?  Puede ser bastante difícil determinar esto solo por la imagen.\n",
        "\n",
        "¿Habrá algún par de países que parezcan muy similares entre si?\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0NebC2_MfEw0"
      },
      "source": [
        "correlation = df.corr()"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hxdXhcTEfEw0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "outputId": "abf0513e-39d0-4975-d7eb-47a4146abcac"
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(15, 10))\n",
        "sns.heatmap(correlation, annot=True,cmap=\"YlGnBu\",ax=ax)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f09974cc610>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1080x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_eKVcnEYopnN"
      },
      "source": [
        "De momento,pareciera ser que todos los países están muy correlacionados. Es algo bastante predecible, ya que los 4 países pertenecen al Reino Unido."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ppGq3k3cfEw1"
      },
      "source": [
        "**TAREA:  Realice las importaciones necesarias para construir un AutoCodificador.  La meta será reducir las dimensiones de 17 --> 2 y ver si hay países que resalten como diferentes.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yzilN38ZfEw1"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import SGD"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ug0GNobafEw2"
      },
      "source": [
        "**TAREA:  Cree un codificador**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3AZmVmP6fEw3"
      },
      "source": [
        "# 17 --> 2\n",
        "codificador = Sequential()\n",
        "codificador.add(Dense(units = 2,\n",
        "                      activation = 'relu',\n",
        "                      input_shape = [17]))"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sMsYJ6JfEw3"
      },
      "source": [
        "**TAREA: Cree un decodificador.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hRIoKoazfEw4"
      },
      "source": [
        "# 2 ---> 17\n",
        "decodificador = Sequential()\n",
        "decodificador.add(Dense(units = 17,\n",
        "                        activation = 'relu',\n",
        "                        input_shape = [2]))"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lAJDQ8j2fEw5"
      },
      "source": [
        "**TAREA: Combine el codificador y el decodificador para conformar un AutoCodificador, y complile el modelo.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Vo8gRPVfEw5"
      },
      "source": [
        "# Autocodificador\n",
        "# 17 ---> 2 ----> 17\n",
        "autocodificador = Sequential([codificador,\n",
        "                              decodificador])\n",
        "autocodificador.compile(loss = \"mse\",\n",
        "                        optimizer = SGD(learning_rate= 1.5))"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ujIKSPVCfEw6"
      },
      "source": [
        "**TAREA: Cree un escalador MinMaxScaler para normalizar (escalar) los datos.  Asegúrese de transponer los datos ya que realmente tenemos 17 columnas (features) y solo 4 filas (uno por país).**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JFsebcYhfEw6"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eXwO50pgfEw6"
      },
      "source": [
        "escalador = MinMaxScaler()"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zteqEYS7fEw7"
      },
      "source": [
        "datos_escalados = escalador.fit_transform(df_transpose)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dLwQp_K1fEw7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f41a45d6-8747-466a-de39-779a9baa835c"
      },
      "source": [
        "datos_escalados"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.        , 0.45      , 0.4562212 , 0.80597015, 0.17647059,\n",
              "        0.47222222, 0.32976445, 0.90163934, 0.61860465, 0.33333333,\n",
              "        0.83870968, 0.92440605, 0.08333333, 0.38461538, 0.37341772,\n",
              "        0.70588235, 0.56521739],\n",
              "       [0.94871795, 0.        , 1.        , 1.        , 1.        ,\n",
              "        1.        , 0.65952891, 1.        , 1.        , 0.48484848,\n",
              "        1.        , 1.        , 1.        , 1.        , 0.        ,\n",
              "        1.        , 1.        ],\n",
              "       [0.94871795, 0.375     , 0.75576037, 0.43283582, 0.        ,\n",
              "        0.22222222, 0.        , 0.2295082 , 0.29302326, 1.        ,\n",
              "        0.09677419, 0.6112311 , 0.        , 0.23076923, 1.        ,\n",
              "        0.95      , 0.91304348],\n",
              "       [0.        , 1.        , 0.        , 0.        , 0.49019608,\n",
              "        0.        , 1.        , 0.        , 0.        , 0.        ,\n",
              "        0.        , 0.        , 0.26666667, 0.        , 0.79113924,\n",
              "        0.        , 0.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wTrCA5-ifEw8"
      },
      "source": [
        "**TAREA:  Ajuste el AutoCodificador a los datos normalizados por medio de 15 épocas.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vtp8SKZhfEw8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "345906ff-fc7c-430d-b5cc-fea195c39f10"
      },
      "source": [
        "autocodificador.fit(datos_escalados,\n",
        "                    datos_escalados,\n",
        "                    epochs = 15)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/15\n",
            "1/1 [==============================] - 1s 658ms/step - loss: 0.3724\n",
            "Epoch 2/15\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.3146\n",
            "Epoch 3/15\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.2962\n",
            "Epoch 4/15\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.2870\n",
            "Epoch 5/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2748\n",
            "Epoch 6/15\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.2604\n",
            "Epoch 7/15\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.2547\n",
            "Epoch 8/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2507\n",
            "Epoch 9/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2365\n",
            "Epoch 10/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2222\n",
            "Epoch 11/15\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.2174\n",
            "Epoch 12/15\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 0.2153\n",
            "Epoch 13/15\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.2140\n",
            "Epoch 14/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2131\n",
            "Epoch 15/15\n",
            "1/1 [==============================] - 0s 4ms/step - loss: 0.2124\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f09493309d0>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7MWjAVmEfEw9"
      },
      "source": [
        "**TAREA: Pase los datos normalizados solo por el codificador y prediga la salida ya re-dimensionada.  Nota: Lo más seguro es que obtengan resultados diferentes debido a las inicializaciones al azar.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q36ddK7ufEw9"
      },
      "source": [
        "codificado_2dim = codificador.predict(datos_escalados)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bAGgnWp3fEw-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3b029aa-61cb-4e59-c9ea-d1ae34e21bf7"
      },
      "source": [
        "codificado_2dim.shape"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kJxTSwyAfEw-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cca77583-c4b7-42c6-f733-6ef138424b02"
      },
      "source": [
        "codificado_2dim"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.6859092 , 0.        ],\n",
              "       [2.4489167 , 0.        ],\n",
              "       [1.0579536 , 0.17704056],\n",
              "       [0.        , 0.08437826]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j1ytkSecfEw-"
      },
      "source": [
        "**TAREA:  Una los datos codificados bidimensionales, con el indice original de países.  Asegúrese de verificar el orden del índice para asegurar que quede unido correctamente.  Hay muchas formas de hacer esto con Pandas.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "06C8tUz9fEw_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6793744e-6610-427e-824a-c2ccfcf8bff6"
      },
      "source": [
        "nombres= list(df_transpose.index.values)\n",
        "nombres"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['England', 'Wales', 'Scotland', 'N.Ireland']"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "plwKsAeDfExA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "outputId": "7ca1e2e9-1279-4e05-efc2-60a71b3632cc"
      },
      "source": [
        "df_nuevo = pd.DataFrame(codificado_2dim)\n",
        "df_nuevo = df_nuevo.transpose()\n",
        "df_nuevo.columns = nombres \n",
        "df_nuevo=df_nuevo.transpose()\n",
        "df_nuevo"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>England</th>\n",
              "      <td>1.685909</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wales</th>\n",
              "      <td>2.448917</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Scotland</th>\n",
              "      <td>1.057954</td>\n",
              "      <td>0.177041</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>N.Ireland</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.084378</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  0         1\n",
              "England    1.685909  0.000000\n",
              "Wales      2.448917  0.000000\n",
              "Scotland   1.057954  0.177041\n",
              "N.Ireland  0.000000  0.084378"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x_OJI__WfExA"
      },
      "source": [
        "**TAREA:  Ahora grafique estos resultados con una gráfica de dispersión, etiquedados por su país respectivo.**\n",
        "\n",
        "¿Se nota ya algún país que difiera de los otros?  ¿Cuál?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hJXv8QBbfExA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "d7a3e7ce-bfa8-4100-8235-8faee28a9ee2"
      },
      "source": [
        "sns.scatterplot(x=df_nuevo[1], y=df_nuevo[0], hue=df_nuevo.index)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f09419477d0>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hX1h41_U0ePn"
      },
      "source": [
        "Escocia e Irlanda del Norte difieren significativamente. Aunque nótese que Irlanda del Norte tiene una forma totalmente a los 3 países."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_7qoMnzafExB"
      },
      "source": [
        "Al regresar a ver los datos en la tabla, esto tiene sentido: los Nor-Irlandeses comen mucho más gramos de papas frescas y mucho menos de frutas frescas, queso, pescado y bebidad alcohólicas.\n",
        "\n",
        "Es buena seña que la estructura que se visualiza refleje un hecho grande de la geografía real:  Irlanda del Norte es el único de los cuatro países que no están en la isla de Gran Bretaña. (Si tiene confusión entre Inglaterra, el Reino Unido y Gran Bretaña, vea: este [video](https://www.youtube.com/watch?v=rNu8XDBSn10).)"
      ]
    }
  ]
}